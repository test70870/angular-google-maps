{"version":3,"file":"drawing-manager.d.ts","sources":["drawing-manager.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"googlemaps\" />\nimport { EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport declare class AgmDrawingManager implements OnChanges, OnDestroy {\n    private _zone;\n    /**\n     * The enabled/disabled state of the drawing control. Defaults to `true`.\n     *\n     */\n    drawingControl: boolean;\n    /**\n     * The DrawingManager's drawing mode, which defines the type of overlay to be\n     * added on the map. A drawing mode of null means that the user can interact\n     * with the map as normal, and clicks do not draw anything.\n     */\n    drawingMode: google.maps.drawing.OverlayType | null;\n    /**\n     * The display options for the drawing control.\n     *\n     */\n    drawingControlOptions: google.maps.drawing.DrawingControlOptions;\n    /**\n     * Options to apply to any new circles created with this DrawingManager.\n     * The `center` and `radius` properties are ignored, and the `map` property of a\n     * new circle is always set to the DrawingManager's map.\n     *\n     */\n    circleOptions: google.maps.CircleOptions;\n    /**\n     * Options to apply to any new markers created with this DrawingManager.\n     * The `position` property is ignored, and the `map` property of a new marker\n     * is always set to the DrawingManager's map.\n     *\n     */\n    markerOptions: google.maps.MarkerOptions;\n    /**\n     * Options to apply to any new polygons created with this DrawingManager.\n     * The `paths` property is ignored, and the map property of a new polygon is\n     * always set to the DrawingManager's map.\n     *\n     */\n    polygonOptions: google.maps.PolygonOptions;\n    /**\n     * Options to apply to any new polylines created with this DrawingManager.\n     * The `path` property is ignored, and the map property of a new polyline is\n     * always set to the DrawingManager's map.\n     *\n     */\n    polylineOptions: google.maps.PolylineOptions;\n    /**\n     * Options to apply to any new rectangles created with this DrawingManager.\n     * The `bounds` property is ignored, and the map property of a new rectangle\n     * is always set to the DrawingManager's map.\n     *\n     */\n    rectangleOptions: google.maps.RectangleOptions;\n    /**\n     * This event is fired when the user has finished drawing a circle.\n     */\n    circleComplete: EventEmitter<google.maps.Circle>;\n    /**\n     * This event is fired when the user has finished drawing a marker.\n     */\n    markerComplete: EventEmitter<google.maps.Marker>;\n    /**\n     * This event is fired when the user has finished drawing an overlay of any\n     * type.\n     */\n    overlayComplete: EventEmitter<google.maps.drawing.OverlayCompleteEvent>;\n    /**\n     * This event is fired when the user has finished drawing a polygon.\n     */\n    polygonComplete: EventEmitter<google.maps.Polygon>;\n    /**\n     * This event is fired when the user has finished drawing a polyline.\n     */\n    polylineComplete: EventEmitter<google.maps.Polyline>;\n    /**\n     * This event is fired when the user has finished drawing a rectangle.\n     */\n    rectangleComplete: EventEmitter<google.maps.Rectangle>;\n    private eventSubscriptions;\n    private drawingManager;\n    constructor(_zone: NgZone);\n    setMap(map: google.maps.Map): void;\n    initEvents(drawingManager: google.maps.drawing.DrawingManager): void;\n    createMvcObservable<E>(eventName: string, mvcObject: google.maps.MVCObject): Observable<E>;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}